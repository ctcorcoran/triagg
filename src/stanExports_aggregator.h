// Generated by rstantools.  Do not edit by hand.

/*
    triagg is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    triagg is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with triagg.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_aggregator_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 58> locations_array__ =
  {" (found before start of program)",
  " (in 'aggregator', line 27, column 2 to column 13)",
  " (in 'aggregator', line 28, column 2 to column 22)",
  " (in 'aggregator', line 30, column 2 to column 9)",
  " (in 'aggregator', line 34, column 2 to column 38)",
  " (in 'aggregator', line 35, column 2 to column 32)",
  " (in 'aggregator', line 36, column 2 to column 77)",
  " (in 'aggregator', line 57, column 2 to column 30)",
  " (in 'aggregator', line 58, column 2 to column 36)",
  " (in 'aggregator', line 59, column 2 to column 36)",
  " (in 'aggregator', line 61, column 4 to column 73)",
  " (in 'aggregator', line 62, column 4 to column 93)",
  " (in 'aggregator', line 63, column 4 to column 95)",
  " (in 'aggregator', line 60, column 15 to line 64, column 3)",
  " (in 'aggregator', line 60, column 2 to line 64, column 3)",
  " (in 'aggregator', line 65, column 2 to column 69)",
  " (in 'aggregator', line 66, column 2 to column 73)",
  " (in 'aggregator', line 39, column 1 to column 30)",
  " (in 'aggregator', line 41, column 1 to column 26)",
  " (in 'aggregator', line 44, column 1 to line 46, column 2)",
  " (in 'aggregator', line 45, column 3 to column 47)",
  " (in 'aggregator', line 48, column 1 to line 50, column 2)",
  " (in 'aggregator', line 49, column 3 to column 45)",
  " (in 'aggregator', line 52, column 1 to line 54, column 2)",
  " (in 'aggregator', line 53, column 3 to column 47)",
  " (in 'aggregator', line 2, column 2 to column 17)",
  " (in 'aggregator', line 3, column 9 to column 10)",
  " (in 'aggregator', line 3, column 2 to column 14)",
  " (in 'aggregator', line 4, column 9 to column 10)",
  " (in 'aggregator', line 4, column 2 to column 15)",
  " (in 'aggregator', line 6, column 2 to column 18)",
  " (in 'aggregator', line 7, column 12 to column 14)",
  " (in 'aggregator', line 7, column 2 to column 16)",
  " (in 'aggregator', line 8, column 9 to column 10)",
  " (in 'aggregator', line 8, column 2 to column 18)",
  " (in 'aggregator', line 9, column 9 to column 10)",
  " (in 'aggregator', line 9, column 2 to column 18)",
  " (in 'aggregator', line 11, column 2 to column 18)",
  " (in 'aggregator', line 12, column 12 to column 14)",
  " (in 'aggregator', line 12, column 2 to column 16)",
  " (in 'aggregator', line 13, column 9 to column 10)",
  " (in 'aggregator', line 13, column 2 to column 18)",
  " (in 'aggregator', line 14, column 9 to column 10)",
  " (in 'aggregator', line 14, column 2 to column 18)",
  " (in 'aggregator', line 16, column 2 to column 18)",
  " (in 'aggregator', line 17, column 12 to column 14)",
  " (in 'aggregator', line 17, column 2 to column 16)",
  " (in 'aggregator', line 18, column 9 to column 10)",
  " (in 'aggregator', line 18, column 2 to column 18)",
  " (in 'aggregator', line 19, column 9 to column 10)",
  " (in 'aggregator', line 19, column 2 to column 18)",
  " (in 'aggregator', line 21, column 2 to column 13)",
  " (in 'aggregator', line 22, column 2 to column 13)",
  " (in 'aggregator', line 24, column 2 to column 9)",
  " (in 'aggregator', line 28, column 9 to column 10)",
  " (in 'aggregator', line 34, column 9 to column 10)",
  " (in 'aggregator', line 35, column 9 to column 10)",
  " (in 'aggregator', line 36, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_aggregator final : public model_base_crtp<model_aggregator> {
private:
  int N;
  Eigen::Matrix<double,-1,1> p_data__;
  Eigen::Matrix<double,-1,1> pc_data__;
  int nc;
  std::vector<int> cinds;
  Eigen::Matrix<double,-1,1> cests_data__;
  Eigen::Matrix<double,-1,1> cvars_data__;
  int nr;
  std::vector<int> rinds;
  Eigen::Matrix<double,-1,1> rests_data__;
  Eigen::Matrix<double,-1,1> rvars_data__;
  int nt;
  std::vector<int> tinds;
  Eigen::Matrix<double,-1,1> tests_data__;
  Eigen::Matrix<double,-1,1> tvars_data__;
  double alpha;
  double gamma;
  double t;
  Eigen::Map<Eigen::Matrix<double,-1,1>> p{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> pc{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> cests{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> cvars{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> rests{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> rvars{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> tests{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> tvars{nullptr, 0};
public:
  ~model_aggregator() {}
  model_aggregator(stan::io::var_context& context__, unsigned int
                   random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_aggregator_namespace::model_aggregator";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 25;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 25;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 26;
      stan::math::validate_non_negative_index("p", "N", N);
      current_statement__ = 27;
      context__.validate_dims("data initialization", "p", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      p_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&p) Eigen::Map<Eigen::Matrix<double,-1,1>>(p_data__.data(), N);
      {
        std::vector<local_scalar_t__> p_flat__;
        current_statement__ = 27;
        p_flat__ = context__.vals_r("p");
        current_statement__ = 27;
        pos__ = 1;
        current_statement__ = 27;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 27;
          stan::model::assign(p, p_flat__[(pos__ - 1)],
            "assigning variable p", stan::model::index_uni(sym1__));
          current_statement__ = 27;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 28;
      stan::math::validate_non_negative_index("pc", "N", N);
      current_statement__ = 29;
      context__.validate_dims("data initialization", "pc", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      pc_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&pc) Eigen::Map<Eigen::Matrix<double,-1,1>>(pc_data__.data(), N);
      {
        std::vector<local_scalar_t__> pc_flat__;
        current_statement__ = 29;
        pc_flat__ = context__.vals_r("pc");
        current_statement__ = 29;
        pos__ = 1;
        current_statement__ = 29;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 29;
          stan::model::assign(pc, pc_flat__[(pos__ - 1)],
            "assigning variable pc", stan::model::index_uni(sym1__));
          current_statement__ = 29;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 30;
      context__.validate_dims("data initialization", "nc", "int",
        std::vector<size_t>{});
      nc = std::numeric_limits<int>::min();
      current_statement__ = 30;
      nc = context__.vals_i("nc")[(1 - 1)];
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "nc", nc, 0);
      current_statement__ = 31;
      stan::math::validate_non_negative_index("cinds", "nc", nc);
      current_statement__ = 32;
      context__.validate_dims("data initialization", "cinds", "int",
        std::vector<size_t>{static_cast<size_t>(nc)});
      cinds = std::vector<int>(nc, std::numeric_limits<int>::min());
      current_statement__ = 32;
      cinds = context__.vals_i("cinds");
      current_statement__ = 33;
      stan::math::validate_non_negative_index("cests", "N", N);
      current_statement__ = 34;
      context__.validate_dims("data initialization", "cests", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      cests_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&cests)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(cests_data__.data(), N);
      {
        std::vector<local_scalar_t__> cests_flat__;
        current_statement__ = 34;
        cests_flat__ = context__.vals_r("cests");
        current_statement__ = 34;
        pos__ = 1;
        current_statement__ = 34;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 34;
          stan::model::assign(cests, cests_flat__[(pos__ - 1)],
            "assigning variable cests", stan::model::index_uni(sym1__));
          current_statement__ = 34;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 35;
      stan::math::validate_non_negative_index("cvars", "N", N);
      current_statement__ = 36;
      context__.validate_dims("data initialization", "cvars", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      cvars_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&cvars)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(cvars_data__.data(), N);
      {
        std::vector<local_scalar_t__> cvars_flat__;
        current_statement__ = 36;
        cvars_flat__ = context__.vals_r("cvars");
        current_statement__ = 36;
        pos__ = 1;
        current_statement__ = 36;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 36;
          stan::model::assign(cvars, cvars_flat__[(pos__ - 1)],
            "assigning variable cvars", stan::model::index_uni(sym1__));
          current_statement__ = 36;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 37;
      context__.validate_dims("data initialization", "nr", "int",
        std::vector<size_t>{});
      nr = std::numeric_limits<int>::min();
      current_statement__ = 37;
      nr = context__.vals_i("nr")[(1 - 1)];
      current_statement__ = 37;
      stan::math::check_greater_or_equal(function__, "nr", nr, 0);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("rinds", "nr", nr);
      current_statement__ = 39;
      context__.validate_dims("data initialization", "rinds", "int",
        std::vector<size_t>{static_cast<size_t>(nr)});
      rinds = std::vector<int>(nr, std::numeric_limits<int>::min());
      current_statement__ = 39;
      rinds = context__.vals_i("rinds");
      current_statement__ = 40;
      stan::math::validate_non_negative_index("rests", "N", N);
      current_statement__ = 41;
      context__.validate_dims("data initialization", "rests", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      rests_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&rests)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(rests_data__.data(), N);
      {
        std::vector<local_scalar_t__> rests_flat__;
        current_statement__ = 41;
        rests_flat__ = context__.vals_r("rests");
        current_statement__ = 41;
        pos__ = 1;
        current_statement__ = 41;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 41;
          stan::model::assign(rests, rests_flat__[(pos__ - 1)],
            "assigning variable rests", stan::model::index_uni(sym1__));
          current_statement__ = 41;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 42;
      stan::math::validate_non_negative_index("rvars", "N", N);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "rvars", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      rvars_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&rvars)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(rvars_data__.data(), N);
      {
        std::vector<local_scalar_t__> rvars_flat__;
        current_statement__ = 43;
        rvars_flat__ = context__.vals_r("rvars");
        current_statement__ = 43;
        pos__ = 1;
        current_statement__ = 43;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 43;
          stan::model::assign(rvars, rvars_flat__[(pos__ - 1)],
            "assigning variable rvars", stan::model::index_uni(sym1__));
          current_statement__ = 43;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 44;
      context__.validate_dims("data initialization", "nt", "int",
        std::vector<size_t>{});
      nt = std::numeric_limits<int>::min();
      current_statement__ = 44;
      nt = context__.vals_i("nt")[(1 - 1)];
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "nt", nt, 0);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("tinds", "nt", nt);
      current_statement__ = 46;
      context__.validate_dims("data initialization", "tinds", "int",
        std::vector<size_t>{static_cast<size_t>(nt)});
      tinds = std::vector<int>(nt, std::numeric_limits<int>::min());
      current_statement__ = 46;
      tinds = context__.vals_i("tinds");
      current_statement__ = 47;
      stan::math::validate_non_negative_index("tests", "N", N);
      current_statement__ = 48;
      context__.validate_dims("data initialization", "tests", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      tests_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&tests)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(tests_data__.data(), N);
      {
        std::vector<local_scalar_t__> tests_flat__;
        current_statement__ = 48;
        tests_flat__ = context__.vals_r("tests");
        current_statement__ = 48;
        pos__ = 1;
        current_statement__ = 48;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 48;
          stan::model::assign(tests, tests_flat__[(pos__ - 1)],
            "assigning variable tests", stan::model::index_uni(sym1__));
          current_statement__ = 48;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 49;
      stan::math::validate_non_negative_index("tvars", "N", N);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "tvars", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      tvars_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&tvars)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(tvars_data__.data(), N);
      {
        std::vector<local_scalar_t__> tvars_flat__;
        current_statement__ = 50;
        tvars_flat__ = context__.vals_r("tvars");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 50;
          stan::model::assign(tvars, tvars_flat__[(pos__ - 1)],
            "assigning variable tvars", stan::model::index_uni(sym1__));
          current_statement__ = 50;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 51;
      context__.validate_dims("data initialization", "alpha", "double",
        std::vector<size_t>{});
      alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 51;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      current_statement__ = 52;
      context__.validate_dims("data initialization", "gamma", "double",
        std::vector<size_t>{});
      gamma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 52;
      gamma = context__.vals_r("gamma")[(1 - 1)];
      current_statement__ = 53;
      context__.validate_dims("data initialization", "t", "double",
        std::vector<size_t>{});
      t = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 53;
      t = context__.vals_r("t")[(1 - 1)];
      current_statement__ = 54;
      stan::math::validate_non_negative_index("omega_raw", "N", N);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("omega", "N", N);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("eta", "N", N);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("theta", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + N + 1;
  }
  inline std::string model_name() const final {
    return "model_aggregator";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_aggregator_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ kappa = DUMMY_VAR__;
      current_statement__ = 1;
      kappa = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> omega_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 2;
      omega_raw = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      local_scalar_t__ m = DUMMY_VAR__;
      current_statement__ = 3;
      m = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> omega =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(omega,
        stan::math::add(stan::math::multiply(omega_raw, t), m),
        "assigning variable omega");
      Eigen::Matrix<local_scalar_t__,-1,1> eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(eta, stan::math::add(omega, kappa),
        "assigning variable eta");
      Eigen::Matrix<local_scalar_t__,-1,1> theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(theta,
        stan::math::logit(
          stan::math::add(
            stan::math::elt_multiply(stan::math::inv_logit(eta),
              stan::math::subtract(1, pc)),
            stan::math::elt_multiply(stan::math::inv_logit(omega), pc))),
        "assigning variable theta");
      {
        current_statement__ = 17;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(kappa, alpha, gamma));
        current_statement__ = 18;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(omega_raw));
        current_statement__ = 19;
        for (int sym1__ = 1; sym1__ <= stan::math::size(cinds); ++sym1__) {
          int i;
          current_statement__ = 19;
          i = cinds[(sym1__ - 1)];
          current_statement__ = 20;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(cests, "cests",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(omega, "omega",
                             stan::model::index_uni(i)),
                           stan::math::sqrt(
                             stan::model::rvalue(cvars, "cvars",
                               stan::model::index_uni(i)))));
        }
        current_statement__ = 21;
        for (int sym1__ = 1; sym1__ <= stan::math::size(rinds); ++sym1__) {
          int i;
          current_statement__ = 21;
          i = rinds[(sym1__ - 1)];
          current_statement__ = 22;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(rests, "rests",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(eta, "eta",
                             stan::model::index_uni(i)),
                           stan::math::sqrt(
                             stan::model::rvalue(rvars, "rvars",
                               stan::model::index_uni(i)))));
        }
        current_statement__ = 23;
        for (int sym1__ = 1; sym1__ <= stan::math::size(tinds); ++sym1__) {
          int i;
          current_statement__ = 23;
          i = tinds[(sym1__ - 1)];
          current_statement__ = 24;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(tests, "tests",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(theta, "theta",
                             stan::model::index_uni(i)),
                           stan::math::sqrt(
                             stan::model::rvalue(tvars, "tvars",
                               stan::model::index_uni(i)))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_aggregator_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double kappa = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      kappa = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> omega_raw =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      omega_raw = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      double m = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      m = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> omega =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> eta =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> theta =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(kappa);
      out__.write(omega_raw);
      out__.write(m);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 4;
      stan::model::assign(omega,
        stan::math::add(stan::math::multiply(omega_raw, t), m),
        "assigning variable omega");
      current_statement__ = 5;
      stan::model::assign(eta, stan::math::add(omega, kappa),
        "assigning variable eta");
      current_statement__ = 6;
      stan::model::assign(theta,
        stan::math::logit(
          stan::math::add(
            stan::math::elt_multiply(stan::math::inv_logit(eta),
              stan::math::subtract(1, pc)),
            stan::math::elt_multiply(stan::math::inv_logit(omega), pc))),
        "assigning variable theta");
      if (emit_transformed_parameters__) {
        out__.write(omega);
        out__.write(eta);
        out__.write(theta);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      double country_proportion = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      country_proportion = 0;
      double country_proportion_urban =
        std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      country_proportion_urban = 0;
      double country_proportion_rural =
        std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      country_proportion_rural = 0;
      current_statement__ = 14;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 10;
        country_proportion = (country_proportion +
          (stan::math::inv_logit(
             stan::model::rvalue(theta, "theta", stan::model::index_uni(i)))
          * stan::model::rvalue(p, "p", stan::model::index_uni(i))));
        current_statement__ = 11;
        country_proportion_urban = (country_proportion_urban +
          ((stan::math::inv_logit(
              stan::model::rvalue(omega, "omega", stan::model::index_uni(i)))
          * stan::model::rvalue(p, "p", stan::model::index_uni(i))) *
          stan::model::rvalue(pc, "pc", stan::model::index_uni(i))));
        current_statement__ = 12;
        country_proportion_rural = (country_proportion_rural +
          ((stan::math::inv_logit(
              stan::model::rvalue(eta, "eta", stan::model::index_uni(i)))
          * stan::model::rvalue(p, "p", stan::model::index_uni(i))) * (1 -
          stan::model::rvalue(pc, "pc", stan::model::index_uni(i)))));
      }
      current_statement__ = 15;
      country_proportion_urban = (country_proportion_urban /
        stan::math::sum(stan::math::elt_multiply(p, pc)));
      current_statement__ = 16;
      country_proportion_rural = (country_proportion_rural /
        stan::math::sum(
          stan::math::elt_multiply(p, stan::math::subtract(1, pc))));
      out__.write(country_proportion);
      out__.write(country_proportion_urban);
      out__.write(country_proportion_rural);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ kappa = DUMMY_VAR__;
      current_statement__ = 1;
      kappa = in__.read<local_scalar_t__>();
      out__.write(kappa);
      Eigen::Matrix<local_scalar_t__,-1,1> omega_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(omega_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable omega_raw");
      out__.write(omega_raw);
      local_scalar_t__ m = DUMMY_VAR__;
      current_statement__ = 3;
      m = in__.read<local_scalar_t__>();
      out__.write(m);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "kappa", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "omega_raw",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "m", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ kappa = DUMMY_VAR__;
      current_statement__ = 1;
      kappa = context__.vals_r("kappa")[(1 - 1)];
      out__.write(kappa);
      Eigen::Matrix<local_scalar_t__,-1,1> omega_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> omega_raw_flat__;
        current_statement__ = 2;
        omega_raw_flat__ = context__.vals_r("omega_raw");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(omega_raw, omega_raw_flat__[(pos__ - 1)],
            "assigning variable omega_raw", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(omega_raw);
      local_scalar_t__ m = DUMMY_VAR__;
      current_statement__ = 3;
      m = context__.vals_r("m")[(1 - 1)];
      out__.write(m);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"kappa", "omega_raw", "m"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"omega", "eta", "theta"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"country_proportion", "country_proportion_urban",
             "country_proportion_rural"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "kappa");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "omega_raw" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "m");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "omega" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "country_proportion");
      param_names__.emplace_back(std::string() + "country_proportion_urban");
      param_names__.emplace_back(std::string() + "country_proportion_rural");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "kappa");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "omega_raw" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "m");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "omega" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "country_proportion");
      param_names__.emplace_back(std::string() + "country_proportion_urban");
      param_names__.emplace_back(std::string() + "country_proportion_rural");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"kappa\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"country_proportion\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"country_proportion_urban\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"country_proportion_rural\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"kappa\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"country_proportion\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"country_proportion_urban\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"country_proportion_rural\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + N) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((N + N) +
      N));
    const size_t num_gen_quantities = emit_generated_quantities * (((1 + 1) +
      1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + N) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((N + N) +
      N));
    const size_t num_gen_quantities = emit_generated_quantities * (((1 + 1) +
      1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_aggregator_namespace::model_aggregator;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_aggregator_namespace::profiles__;
}
#endif
#endif
